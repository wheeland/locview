!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CodeItem	codemodel.h	/^class CodeItem$/;"	c
CodeModel	codemodel.h	/^class CodeModel : public QObject$/;"	c
Directory	codemodel.h	/^class Directory : public CodeItem$/;"	c
File	codemodel.h	/^class File : public CodeItem$/;"	c
State	codemodel.h	/^    enum State$/;"	g	class:CodeModel
State_Analyzing	codemodel.h	/^        State_Analyzing$/;"	e	enum:CodeModel::State
State_Done	codemodel.h	/^        State_Done,$/;"	e	enum:CodeModel::State
State_Enumerating	codemodel.h	/^        State_Enumerating,$/;"	e	enum:CodeModel::State
Type	codemodel.h	/^    enum Type { Type_Directory, Type_File };$/;"	g	class:CodeItem
Type_Directory	codemodel.h	/^    enum Type { Type_Directory, Type_File };$/;"	e	enum:CodeItem::Type
Type_File	codemodel.h	/^    enum Type { Type_Directory, Type_File };$/;"	e	enum:CodeItem::Type
analyzedFileCount	codemodel.h	/^    int analyzedFileCount() const { return m_analyzedFileCount; }$/;"	f	class:CodeModel
children	codemodel.h	/^    const QVector<CodeItem*> &children() const { return m_children; }$/;"	f	class:Directory
dir	codemodel.h	/^    Directory *dir() const { return m_dir; }$/;"	f	class:File
dirCount	codemodel.h	/^    int dirCount() const { return m_dirCount; }$/;"	f	class:CodeModel
ending	codemodel.h	/^    QString ending() const { return m_ending; }$/;"	f	class:File
excludePaths	codemodel.h	/^    QStringList excludePaths() const { return m_excludePaths; }$/;"	f	class:CodeModel
fileCount	codemodel.h	/^    int fileCount() const { return m_fileCount; }$/;"	f	class:CodeModel
fileEndings	codemodel.h	/^    QStringList fileEndings() const { return m_fileEndings; }$/;"	f	class:CodeModel
fullName	codemodel.h	/^    QString fullName() const { return m_fullName; }$/;"	f	class:Directory
loc	codemodel.h	/^    int loc() const { return m_loc; }$/;"	f	class:Directory
loc	codemodel.h	/^    int loc() const { return m_loc; }$/;"	f	class:File
m_analyzedFileCount	codemodel.h	/^    int m_analyzedFileCount = 0;$/;"	m	class:CodeModel
m_cache	codemodel.h	/^    CodeModelCache m_cache;$/;"	m	class:CodeModel
m_children	codemodel.h	/^    QVector<CodeItem*> m_children;$/;"	m	class:Directory
m_dir	codemodel.h	/^    Directory *m_dir = nullptr;$/;"	m	class:File
m_dirCount	codemodel.h	/^    int m_dirCount = 0;$/;"	m	class:CodeModel
m_ending	codemodel.h	/^    QString m_ending;$/;"	m	class:File
m_excludeAbsolutePaths	codemodel.h	/^    QStringList m_excludeAbsolutePaths;$/;"	m	class:CodeModel
m_excludePaths	codemodel.h	/^    QStringList m_excludePaths;$/;"	m	class:CodeModel
m_fileCount	codemodel.h	/^    int m_fileCount = 0;$/;"	m	class:CodeModel
m_fileEndings	codemodel.h	/^    QStringList m_fileEndings;$/;"	m	class:CodeModel
m_fullName	codemodel.h	/^    QString m_fullName;$/;"	m	class:Directory
m_loc	codemodel.h	/^    int m_loc = 0;$/;"	m	class:Directory
m_loc	codemodel.h	/^    int m_loc = 0;$/;"	m	class:File
m_name	codemodel.h	/^    QString m_name;$/;"	m	class:Directory
m_name	codemodel.h	/^    QString m_name;$/;"	m	class:File
m_ok	codemodel.h	/^    bool m_ok = false;$/;"	m	class:File
m_parent	codemodel.h	/^    Directory *m_parent = nullptr;$/;"	m	class:Directory
m_path	codemodel.h	/^    QString m_path;$/;"	m	class:Directory
m_rootDirNames	codemodel.h	/^    QStringList m_rootDirNames;$/;"	m	class:CodeModel
m_rootDirs	codemodel.h	/^    QHash<QString, Directory*> m_rootDirs;$/;"	m	class:CodeModel
m_state	codemodel.h	/^    State m_state = State_Done;$/;"	m	class:CodeModel
name	codemodel.h	/^    QString name() const { return m_name; }$/;"	f	class:Directory
name	codemodel.h	/^    QString name() const { return m_name; }$/;"	f	class:File
ok	codemodel.h	/^    bool ok() const { return m_ok; }$/;"	f	class:File
override	codemodel.h	/^    QString path() const override;$/;"	m	class:File
override	codemodel.h	/^    void traverse(const DirectoryVisitor &visitor) const override;$/;"	m	class:Directory
override	codemodel.h	/^    void traverse(const DirectoryVisitor &visitor) const override;$/;"	m	class:File
override	codemodel.h	/^    void traverse(const FileVisitor &visitor) const override;$/;"	m	class:Directory
override	codemodel.h	/^    void traverse(const FileVisitor &visitor) const override;$/;"	m	class:File
parentDir	codemodel.h	/^    Directory *parentDir() const { return m_parent; }$/;"	f	class:Directory
rootDirNames	codemodel.h	/^    QStringList rootDirNames() const { return m_rootDirNames; }$/;"	f	class:CodeModel
state	codemodel.h	/^    State state() const { return m_state; }$/;"	f	class:CodeModel
~CodeItem	codemodel.h	/^    virtual ~CodeItem() {}$/;"	f	class:CodeItem
